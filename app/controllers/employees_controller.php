<?php
App::import('Sanitize');
class EmployeesController extends AppController {

    var $name = 'Employees';

   function index() {
        $locations = $this->Employee->EmpLoc->find('all');
        $user=$this->Session->read('Auth');
        $user_id=$user['User']['id'];
        $this->set(compact('locations','user_id'));
    }
	function index6() {
        $locations = $this->Employee->EmpLoc->find('all');
        $this->set(compact('locations'));
    }
   function index5() {
        $locations = $this->Employee->EmpLoc->find('all');
        $this->set(compact('locations'));
    }
   function index3() {
        $locations = $this->Employee->EmpLoc->find('all');
        $this->set(compact('locations'));
    }
   function index4() {
        $locations = $this->Employee->EmpLoc->find('all');
        $this->set(compact('locations'));
    }
    function index2($id = null) {
        $this->set('parent_id', $id);
    }

    function search() {
        
    }
	function disableuser(){
			$xx=  $this->Employee->query('UPDATE `users` SET `is_active`=1 WHERE 1');
			$this->Employee->recursive=-1;
			$employees = $this->Employee->find('all');
            //print_r($employees);
			$i=1;
			$this->loadModel('User');
            foreach($employees as $employee){
				if($employee['Employee']['status']=='deactivated'){
					$this->data['User']['id']=$employee['Employee']['user_id'];
					$this->data['User']['is_active']=false;
					$this->User->save($this->data);
				}
			}
			$sqq="SELECT * FROM (
SELECT `id`,`user_id`,(SELECT COUNT(*) FROM employee_details WHERE `employee_id`=`e`.`id`) AS `cnt` FROM `hr`.`employees` `e`
) AS `x` WHERE `x`.`cnt`<=0";
			$xy=  $this->Employee->query($sqq);	
			foreach($xy as $ww){
					$this->data['User']['id']=$ww['x']['user_id'];
					$this->data['User']['is_active']=false;
					$this->User->save($this->data);
			}
		   $sql="UPDATE `employee_details` as `p` SET 
`end_date`= 
    (SELECT `date`
    FROM `terminations`
    WHERE `employee_id` =`p`.`employee_id`)
WHERE 
    (SELECT `status`
    FROM `employees`
    WHERE `id`=`p`.`employee_id`)='deactivated' 
AND `end_date`='0000-00-00'";
 $xx=  $this->Employee->query($sql);
 
  }
    function sendsmsusers(){
        $this->autoRender = false;
    $this->Employee->recursive = 2;
    $emps=$this->Employee->find('all', array('conditions' =>array('status'=>'active')));
    //print_r($emps);
    foreach($emps as $emp){
        if($emp['Employee']['telephone']!==''){
            if(!empty($emp['User']) && !empty($emp['User']['Person'])){
            $number=trim($emp['Employee']['telephone']);
            $text="Hello ".$emp['User']['Person']['first_name'].", Your AbayERP account is   U:".$emp['User']['username']." P:123456  Go to http://www.abaybank.com.et/web-portal to login. Thanks.";
            echo $text;
            $this->data['TextMessage']['name']=$number;
            $this->data['TextMessage']['text']=$text;
            $this->loadModel('TextMessage');
            $this->TextMessage->create();
            $this->TextMessage->save($this->data);
            
            }
        }
    }
    }
    function sendusers(){
    $this->autoRender = false;
    $this->Employee->recursive = 2;
    $emps=$this->Employee->find('all', array('conditions' =>array('status'=>'active')));
    foreach($emps as $emp){
        if(!empty($emp['User']) && !empty($emp['User']['email']) && !empty($emp['User']['Person'])){
            $fullname= $emp['User']['Person']['first_name'].' '.$emp['User']['Person']['middle_name'];
            $username= $emp['User']['username'].'<br>';
            $password='123456';
            $from='abayerp@abaybank.com.et';
            $from_name='AbayERP';
            $subject="Your Abay Bank ERP System Account";
            //echo $body;
            $body='<table width="502" border="0">
  <tr>
    <td width="492" height="46" align="right" bgcolor="#0066FF" color="#fff"><div align="center" style="color:#fff"><span>Welcome to Abay Bank ERP System</span></div></td>
  </tr>
  <tr>
    <td  style="font-family: Arial,Helvetica,sans-serif;font-size: 14px;"><p>To:  '.$fullname.'</p>      <p class="style7">&nbsp;&nbsp;&nbsp;Your Abay Bank ERP System Account is:<br />
        <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User Name: <strong>'.$username.'</strong><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password: <strong>'.$password.'</strong><br />
        <br />
&nbsp;
&nbsp;&nbsp;Use the address <strong>http://www.abaybank.com.et/web-portal</strong> to access your account and Please change your password after first login!<br />
        <br />
&nbsp;&nbsp;Regards,<br />
&nbsp;&nbsp;Abay Bank</p><hr></td>
  </tr>
  <tr>
    <td><span style="color:#999;font-size: 12px;">* Note: Please don\'t reply to this address, it is generated by the system.</span></td>
  </tr>
</table>';
            $this->data['Email']['name']=$subject;
            $this->data['Email']['to']=$emp['User']['email'];
            $this->data['Email']['from']=$from;
            $this->data['Email']['from_name']=$from_name;
            $this->data['Email']['body']=$body;
            $this->loadModel('Email');
            $this->Email->create();
            $this->Email->save($this->data);
            echo $body;
           // $this->smtpmailer($to, $from, $from_name, $subject, $body, false);
        }
            
    }
    }
    
   	 function message($id = null) {
        if (!empty($this->data)) {
            $from='abayerp@abaybank.com.et';
            $from_name='AbayERP';
            $subject=$this->data['Employee']['subject'];
            $body=$this->data['Employee']['message'];
            
            $conditions['Employee.status'] = 'active';
            //$conditions['Employee.id']='2';
        $this->Employee->recursive = 2;
        $employees = $this->Employee->find('all', array('conditions' => $conditions));
        //print_r($employees);
        foreach($employees as $employee){
            if($this->data['Employee']['use']=='SMS' || $this->data['Employee']['use']=='Both'){
            $tel=$employee['Employee']['telephone'];
            $this->data['TextMessage']['name']=$tel;
            $this->data['TextMessage']['text']=$body;
            $this->loadModel('TextMessage');
            $this->TextMessage->create();
            $this->TextMessage->save($this->data);
            }
            if($this->data['Employee']['use']=='Email' || $this->data['Employee']['use']=='Both'){
            if(!empty($employee['User'])){
            $this->data['Email']['name']=$subject;
            $this->data['Email']['to']=$employee['User']['email'];
            $this->data['Email']['from']=$from;
            $this->data['Email']['from_name']=$from_name;
            $this->data['Email']['body']=$body;
            $this->loadModel('Email');
            $this->Email->create();
            $this->Email->save($this->data);
            $to=$employee['User']['email'];
            //$this->smtpmailer($to, $from, $from_name, $subject, $body, false);
            }
            }
            
            
        }
        $this->Session->setFlash(__('Message Sent to Quie.', true), '');
        
        $this->render('/elements/success');
        }
        if($id)
			$this->set('parent_id', $id);
                $employees = $this->Employee->find('list');
		$this->set(compact('employees'));
    }
    function search_emp() {
        //$this->loadModel('Person');
        $this->Employee->recursive=2;
        //$people = $this->Person->find('list');
		$conditions['Employee.status']='active';
        $this->set('people', $this->Employee->find('all',array('conditions' => $conditions)));
        //$this->set('results', $this->Person->find('count'));
    }
	function search_emp2() {

      $people=  $this->Employee->query('SELECT * FROM `viewemployee` , `viewemployement` WHERE `viewemployee`.`Record Id` = `viewemployement`.`Record Id` AND `viewemployement`.`End Date` = "9999-99-99" AND `viewemployee`.`Status`= "active" GROUP BY `viewemployee`.`Record Id`');
	  $this->set('people',$people);
    }
	function search_emp_all() {

      $people=  $this->Employee->query('SELECT * FROM `viewemployee` , `viewemployement` WHERE `viewemployee`.`Record Id` = `viewemployement`.`Record Id` GROUP BY `viewemployee`.`Record Id`');
	  $this->set('people',$people);
    }
	function search_emp6() {
 
      $people=  $this->Employee->query('SELECT * FROM `viewemployee` , `viewemployement` WHERE `viewemployee`.`Record Id` = `viewemployement`.`Record Id` AND `viewemployement`.`End Date` = "9999-99-99" AND `viewemployee`.`Status`= "deactivated" GROUP BY `viewemployee`.`Record Id`');
    //  var_dump($people);die();
	  $this->set('people',$people);
        //$this->loadModel('Person');
      //  $this->Employee->recursive=2;
        //$people = $this->Person->find('list');
	//	$conditions['Employee.status']='deactivated';
     //   $this->set('people', $this->Employee->find('all',array('conditions' => $conditions)));
        //$this->set('results', $this->Person->find('count'));
    }
	  function search_emp7($startdate = null) {

	$people=  $this->Employee->query('SELECT * FROM `viewemployee` , `viewemployement` WHERE `viewemployee`.`Record Id` = `viewemployement`.`Record Id` GROUP BY `viewemployee`.`Record Id`');
	$this->set('people',$people);
    }
	     function ConvertEthiopicToGregoreanDate($ey, $em, $ed)
        {
            $starts = array(11, 11, 10, 10, 9, 8, 10, 9, 9, 8, 8, 7, 6);
            if($ey % 4 == 0)
                for ($i = 0; $i < 6; $i++)
                    $starts[$i]++;

            $gy = ($em <= 4) ? $ey + 7 : $ey + 8;

            $gm = ($em + 7)%12 + 1;
			
			if(!array_key_exists(($em-1),$starts))
			return "date error";
            $gdt = strtotime($gy."-".$gm."-".$starts[$em-1]." + ".($ed-1)." days");
            //gdt = gdt.AddDays(ed - 1);

            return date('Y-m-d', $gdt);
        }
		function convertdate(){
			$this->autoRender = false;
			$this->loadModel('Person');
            $this->Person->recursive = -1;
            $people = $this->Person->find('all');
			//print_r($people);
			foreach($people as $person){
			$date=explode('-',$person['Person']['birthdate']);
		print_r($date);
			if(count($date)==3){
				$this->data['id']=$person['Person']['id'];
				$this->data['birthdate']= $this->ConvertEthiopicToGregoreanDate($date[0],$date[1],$date[2]);
				print_r($this->data);
				//$this->Person->save($this->data);
			}			
			}			
		}
      
  function array_sort_by_column(&$arr, $col, $dir = SORT_ASC) {
            $sort_col = array();
            foreach ($arr as $key => $row) {
                $sort_col[$key] = $row[$col];
            }

            array_multisort($sort_col, $dir, $arr);
        }
    
  function scaleup2016(){
	//disabled for accidental access
		 /*  $this->autoRender = false;
            $this->Employee->recursive = 2;
            $employees = $this->Employee->find('all',array('conditions' => array('Employee.status'=>'active')));
            //print_r($employees);
			$i=1;
			$output="<table>";
            foreach($employees as $employee){
               if(!empty($employee['EmployeeDetail'])){
                   // print_r($employee);
				   $year=0;
                   $datestart=$employee['EmployeeDetail'];
                   $this->array_sort_by_column($datestart, "start_date");
                   if($datestart[0]['start_date']<"2014-07-01"){//leave out employees not have 1 year exp
				   $startdate=$datestart[0]['start_date'];
				     $year=1;
				   if($datestart[0]['start_date']<"2012-07-01")
				     $year=3;
                   $this->datax['EmployeeDetail']['end_date']='2015-12-31';
                   if(count($employee['EmployeeDetail'])>1)
                   $this->array_sort_by_column($employee['EmployeeDetail'], "start_date", SORT_DESC);
				   if($employee['EmployeeDetail'][0]['start_date']>="2015-07-01")
				     $year=0;//position change with last 6 months
				   if($year==1 || $year==3){
                   $this->datax['EmployeeDetail']['id']=$employee['EmployeeDetail'][0]['id'];
                   $this->loadModel('EmployeeDetail');
                   $this->EmployeeDetail->save($this->datax);
                   //print_r($this->datax);
                   $con['Scale.grade_id'] = $employee['EmployeeDetail'][0]['grade_id'];
                   $con['Scale.step_id'] = '2';
				   if($year==3)
				   $con['Scale.step_id'] = '3';
                   $this->loadModel('Scale');
                   $salary = $this->Scale->find('all', array('conditions' => $con));
                   $this->data['EmployeeDetail']['salary']=$salary[0]['Scale']['salary'];
                   
                   $this->data['EmployeeDetail']['step_id']=$con['Scale.step_id'];
                   $this->data['EmployeeDetail']['start_date']='2016-01-01';
                   $this->data['EmployeeDetail']['employee_id']=$employee['EmployeeDetail'][0]['employee_id'];
                   $this->data['EmployeeDetail']['grade_id']=$employee['EmployeeDetail'][0]['grade_id'];
				   $this->data['EmployeeDetail']['branch_id']=$employee['EmployeeDetail'][0]['branch_id'];
                   $this->data['EmployeeDetail']['position_id']=$employee['EmployeeDetail'][0]['position_id'];
                   $this->data['EmployeeDetail']['end_date']='';
                   $this->loadModel('EmployeeDetail');
                   $this->EmployeeDetail->create();
                   $this->EmployeeDetail->save($this->data);
                   $output.='<tr><td>'.$i.'</td><td>'.$employee['User']['Person']['first_name'].'</td><td>'.$employee['User']['Person']['middle_name'].'</td><td>'.$employee['EmployeeDetail'][0]['Branch']['name'].'</td><td> '.$employee['EmployeeDetail'][0]['Position']['name'].'</td><td>Year-'.$year.'</td><td>Start Date-'.$startdate.'</td></tr>';
                   // print_r($this->data);
				   $i++;
				   }
                 }
                }
                
                   
            }
				$output=$output."</table>";
				$file = "Report.xls";
                header("Content-type: application/vnd.ms-excel");
                header("Content-Disposition: attachment; filename=$file");
                echo $output;
            */
        }    
    function scale_up_all(){
           /* disabled for accidental access
		   $this->autoRender = false;
            $this->Employee->recursive = 2;
            $employees = $this->Employee->find('all');
            //print_r($employees);
            foreach($employees as $employee){
               if(!empty($employee['EmployeeDetail'])){
                   // print_r($employee);
                   $datestart=$employee['EmployeeDetail'];
                   $this->array_sort_by_column($datestart, "start_date");
                   if($datestart[0]['start_date']<"2013-01-04"){//leave out employees not stayed for six month
                   $this->datax['EmployeeDetail']['end_date']='2013-06-30';
                   if(count($employee['EmployeeDetail'])>1)
                   $this->array_sort_by_column($employee['EmployeeDetail'], "start_date", SORT_DESC);
                   $this->datax['EmployeeDetail']['id']=$employee['EmployeeDetail'][0]['id'];
                   $this->loadModel('EmployeeDetail');
                   $this->EmployeeDetail->save($this->datax);
                   //print_r($this->datax);
                   $con['Scale.grade_id'] = $employee['EmployeeDetail'][0]['grade_id'];
                   $con['Scale.step_id'] = '2';
                   $this->loadModel('Scale');
                   $salary = $this->Scale->find('all', array('conditions' => $con));
                   $this->data['EmployeeDetail']['salary']=$salary[0]['Scale']['salary'];
                   
                   $this->data['EmployeeDetail']['step_id']='2';
                   $this->data['EmployeeDetail']['start_date']='2013-07-01';
                   $this->data['EmployeeDetail']['employee_id']=$employee['EmployeeDetail'][0]['employee_id'];
                   $this->data['EmployeeDetail']['grade_id']=$employee['EmployeeDetail'][0]['grade_id'];
                   $this->data['EmployeeDetail']['position_id']=$employee['EmployeeDetail'][0]['position_id'];
                   
                   $this->loadModel('EmployeeDetail');
                   $this->EmployeeDetail->create();
                   //$this->data['EmployeeDetail']['id']=null;
                   $this->data['EmployeeDetail']['end_date']='';
                   $this->EmployeeDetail->save($this->data);
                   //echo $employee['User']['Person']['first_name'].'|'.$employee['EmployeeDetail'][0]['Position']['name'].'<br>';
                  // print_r($this->data);
                   }
                }
                
                   
            }*/
            
        }
        
      function clear_data(){
            $this->autoRender = false;
            $qr="SELECT * FROM (
SELECT `id`,(SELECT COUNT(*) FROM employee_details WHERE `employee_id`=`e`.`id`) AS `cnt` FROM `hr`.`employees` `e`
) AS `x` WHERE `x`.`cnt`<=0";
			$qr2="SELECT * FROM (
SELECT `id`,(SELECT COUNT(*) FROM users WHERE `id`=`e`.`user_id`) AS `cnt` FROM `hr`.`employees` `e`
) AS `x` WHERE `x`.`cnt`<=0";
            $emp_d = $this->Employee->query($qr);
			foreach($emp_d as $em){
				$this->Employee->delete($em['x']['id']);
			}
			$emp_d2 = $this->Employee->query($qr2);
			foreach($emp_d2 as $em){
				$this->Employee->delete($em['x']['id']);
			}
			//clear employee Details
			$qr3="SELECT * FROM (
SELECT `id`,(SELECT COUNT(*) FROM employees WHERE `id`=`e`.`employee_id`) AS `cnt` FROM `hr`.`employee_details` `e`
) AS `x` WHERE `x`.`cnt`<=0";
			$emp_d3 = $this->Employee->query($qr3);
			foreach($emp_d3 as $em){
				$this->Employee->EmployeeDetail->delete($em['x']['id']);
			}
			/*
            foreach($employees as $employee){
                if(empty($employee['User']['id'])){
                    //print_r($employee);
                    $this->Employee->delete($employee['Employee']['id']);
                }
                else if(empty($employee['User']['Person'])){
                    //print_r($employee);
                    $this->Employee->delete($employee['Employee']['id']);
                }
                else if(empty($employee['EmployeeDetail'])){
                    print_r($employee);
                   // $this->Employee->delete($employee['Employee']['id']);
                }
				else if($employee['Employee']['status']=='deleted'){
					$this->Employee->delete($employee['Employee']['id']);
				}
				
                
                   
            }
			*/
            
        }
    function list_data($id = null) {

        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;

        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if (isset($conditions['Employee.name LIKE'])) {
            if (trim($conditions['Employee.name LIKE']) == '%%')
                unset($conditions['Employee.name LIKE']);
        }
        if (isset($conditions['Employee.name LIKE'])) {
            $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
            unset($conditions['Employee.name LIKE']);
            $xx = explode(' ', trim($fullname));
            $con['Person.first_name LIKE'] = (isset($xx[0])) ? trim($xx[0]) . '%' : '%%';
            $con['Person.middle_name LIKE'] = (isset($xx[1])) ? trim($xx[1]) . '%' : '%%';
            $con['Person.last_name LIKE'] = (isset($xx[2])) ? trim($xx[2]) . '%' : '%%';
            //print_r($xx);
            if (count($xx) < 10) {
                //$this->Employee->User->Person->recursive=4;
                $peos = $this->Employee->User->Person->find('all', array('conditions' => $con));
                
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['User'][0]))
                        $condu = array_merge(array($peo['User'][0]['id']), $condu);
                }
            }else
                $condu = array('-1');
            $conditions = array_merge(array("OR" => array("Employee.user_id" => $condu)), $conditions);
        }
        $this->Employee->recursive = 2;
		$conditions['Employee.status']='active';
		//'order' => 'User.username'
        $employees = $this->Employee->find('all', array('conditions' => $conditions, 'order' => 'User.username','limit' => $limit, 'offset' => $start));
        $this->set('employees', $employees);
        //print_r($employees);
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }
 function list_data_directory($id = null) {
       // $this->Employee->unbindModel();
      $chr="WHERE ";
        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        //var_dump($conditions);die();
        //eval("\$conditions = array( " . $conditions . " );");
        /*if (isset($conditions)) {
        $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
        $xx = explode(' ', trim($fullname));
          
          $count=0;
         foreach ($xx as $k) {
          var_dump($xx);
            if($count==0){
              $chr .=" e.`First Name` LIKE '%$k%' ";
             $count=$count+1;
           }if($count==1){
              $chr .="AND e.`Middle Name` LIKE '%  %' ";
             $count=$count+1;
           }if($count==2){
              $chr .=" AND e.`Last Name` LIKE '% $k %'";
             $count=$count+1;
           }
            
         }
        }*/

        //var_dump($chr);die();
        $this->Employee->recursive = 3;
        
        //$conditions['Employee.status']='active';
        if(isset($conditions)&& strlen($conditions)>0){
        //  var_dump($conditions);die();
        $cmd="select *,(case e.photo when '' then ( case e.Sex when 'M' THEN 'male.jpg' else 'female.jpg' end) else e.photo end) as photoX from viewemployee e inner join viewemployement ve on e.`record id`=ve.`record id` LEFT JOIN holidays as m ON m.id = ( SELECT id FROM holidays mm WHERE e.`record id`=mm.`employee_id` ORDER BY mm.id DESC LIMIT 1 ) WHERE e.status='active' AND ve.`end date`='9999-99-99'   $conditions";
        $countCmd="select count(*) from viewemployee e inner join viewemployement ve  on e.`record id`=ve.`record id`  WHERE Status='active' AND ve.`end date`='9999-99-99' $conditions";
      }else{
        //var_dump("OK");die();
        $cmd="select *,(case e.photo when '' then ( case e.Sex when 'M' THEN 'male.jpg' else 'female.jpg' end) else e.photo end) as photoX from viewemployee e inner join viewemployement ve  on e.`record id`=ve.`record id` WHERE  Status='active' AND ve.`end date`='9999-99-99'  ";
        $countCmd="select count(*) from viewemployee e inner join viewemployement ve  on e.`record id`=ve.`record id` WHERE Status='active' AND ve.`end date`='9999-99-99' ";
      }
        //var_dump($cmd);die();
        //'order' => 'User.username'
        $employees = $this->Employee->query($cmd);
        $this->set('employees', $employees);
        //print_r($employees);
        //var_dump($conditions);die();
        $this->set('results', $this->Employee->query($countCmd));
    }
	function list_data6($id = null) {


        /*
        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if (isset($conditions['Employee.name LIKE'])) {
            if (trim($conditions['Employee.name LIKE']) == '%%')
                unset($conditions['Employee.name LIKE']);
        }
        if (isset($conditions['Employee.name LIKE'])) {
            $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
            unset($conditions['Employee.name LIKE']);
            $xx = explode(' ',trim($fullname));
            $con['Person.first_name LIKE'] = (isset($xx[0])) ? trim($xx[0]) . '%' : '%%';
            $con['Person.middle_name LIKE'] = (isset($xx[1])) ? trim($xx[1]) . '%' : '%%';
            $con['Person.last_name LIKE'] = (isset($xx[2])) ? trim($xx[2]) . '%' : '%%';
            
            if (count($xx) < 10) {
                $peos = $this->Employee->User->Person->find('all', array('conditions' => $con));
                
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['User'][0]))
                        $condu = array_merge(array($peo['User'][0]['id']), $condu);
                }
            }else
                $condu = array('-1');
            $conditions = array_merge(array("OR" => array("Employee.user_id" => $condu)), $conditions);
        }
        if ($location_id != -1) {
            $conditions['Employee.location_id'] = $location_id;
        }
        
          //var_dump($conditions);die();
         
          $this->Employee->recursive = 0;
  		    $conditions['Employee.status']='deactivated';
              
          $employees = $this->Employee->find('all', array('conditions' => $conditions, 'order' => 'User.username','limit' => $limit, 'offset' => $start));
          $this->set('employees', $employees);
          
          $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
          */
          
          ////         >>>>>>>>>>>>>>>>>>
          
          
        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;

        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if (isset($conditions['Employee.name LIKE'])) {
            if (trim($conditions['Employee.name LIKE']) == '%%')
                unset($conditions['Employee.name LIKE']);
        }
        if (isset($conditions['Employee.name LIKE'])) {
            $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
            unset($conditions['Employee.name LIKE']);
            $xx = explode(' ', trim($fullname));
            $con['Person.first_name LIKE'] = (isset($xx[0])) ? trim($xx[0]) . '%' : '%%';
            $con['Person.middle_name LIKE'] = (isset($xx[1])) ? trim($xx[1]) . '%' : '%%';
            $con['Person.last_name LIKE'] = (isset($xx[2])) ? trim($xx[2]) . '%' : '%%';
            //print_r($xx);
            if (count($xx) < 10) {
                //$this->Employee->User->Person->recursive=4;
                $peos = $this->Employee->User->Person->find('all', array('conditions' => $con));
                
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['User'][0]))
                        $condu = array_merge(array($peo['User'][0]['id']), $condu);
                }
            }else
                $condu = array('-1');
            $conditions = array_merge(array("OR" => array("Employee.user_id" => $condu)), $conditions);
        }
        $this->Employee->recursive = 2;
		$conditions['Employee.status']='deactivated';
		//'order' => 'User.username'
        $employees = $this->Employee->find('all', array('conditions' => $conditions, 'order' => 'User.username','limit' => $limit, 'offset' => $start));
        $this->set('employees', $employees);
        //print_r($employees);
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }
    
function list_data5($id = null) {

        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if (isset($conditions['Employee.name LIKE'])) {
            if (trim($conditions['Employee.name LIKE']) == '%%')
                unset($conditions['Employee.name LIKE']);
        }
        if (isset($conditions['Employee.name LIKE'])) {
            $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
            unset($conditions['Employee.name LIKE']);
            $xx = explode(' ', trim($fullname));
            $con['Person.first_name LIKE'] = (isset($xx[0])) ? trim($xx[0]) . '%' : '%%';
            $con['Person.middle_name LIKE'] = (isset($xx[1])) ? trim($xx[1]) . '%' : '%%';
            $con['Person.last_name LIKE'] = (isset($xx[2])) ? trim($xx[2]) . '%' : '%%';
            //print_r($xx);
            if (count($xx) < 10) {
                //$this->Employee->User->Person->recursive=4;
                $peos = $this->Employee->User->Person->find('all', array('conditions' => $con));
                
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['User'][0]))
                        $condu = array_merge(array($peo['User'][0]['id']), $condu);
                }
            }else
                $condu = array('-1');
            $conditions = array_merge(array("OR" => array("Employee.user_id" => $condu)), $conditions);
        }
        if ($location_id != -1) {
            $conditions['Employee.location_id'] = $location_id;
        }
        $conditions['Employee.user_id']=$this->Session->read('Auth.User.id');
        $this->Employee->recursive = 2;
        $employees = $this->Employee->find('all', array('conditions' => $conditions, 'order' => 'User.username','limit' => $limit, 'offset' => $start));
        $this->set('employees', $employees);
        //print_r($employees);
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }
     function list_data3($id = null) {

        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = 500;

        $conditions['PayrollEmployee.payroll_id'] = $this->Session->read('Auth.User.payroll_id');
		$conditions['PayrollEmployee.status'] = 'active';
        $this->loadModel('PayrollEmployee');
        $this->PayrollEmployee->recursive = -1;
		$peos = $this->PayrollEmployee->find('all', array('conditions' => $conditions));     
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['PayrollEmployee']['employee_id']))
                        $condu = array_merge(array($peo['PayrollEmployee']['employee_id']), $condu);
                }

            $conditions = array("OR" => array("Employee.id" => $condu));
			$conditions['Employee.status'] = 'active';
			$this->Employee->unbindModel(array('belongsTo' => array('EmpLoc','ContactLocation')));
			$this->Employee->unbindModel(array('hasMany' => array('EmployeeDetail','Education','Experience','Language','Offspring','Loan')));
		$this->Employee->recursive=2;
        $employees=$this->Employee->find('all', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start));
        $this->set('employees', $employees);
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start)));
  
    }
    
     function list_data4($id = null) {

        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 500;

       // print_r($this->Session->read('Auth.User'));
        $this->loadModel('Employee');

        $sup=$this->Employee->find('all', array('conditions' => array('user_id'=>$this->Session->read('Auth.User.id'))));

         $emp_detail=end($sup[0]['EmployeeDetail']); 
         $position_id=  $emp_detail['position_id'];
         $this->loadModel('Position');        
         $position=$this->Position->find('all', array('conditions' => array('Position.id'=>$position_id)));
         $current_position=$position[0]['Position']['name'];
         $valid_position="Director";
         if(strpos($current_position, $valid_position) !== false){
           if(!empty($sup)){
          $last_branch=end($sup[0]['EmployeeDetail']);
          $arr_for_search=array(0);
          $user_id="SELECT `viewemployee`.`Record Id` FROM `viewemployee` , `viewemployement` WHERE `viewemployee`.`Record Id` = `viewemployement`.`Record Id` AND `viewemployement`.`End Date` = '9999-99-99' AND `viewemployee`.`Status`= 'active' AND `viewemployement`.`Branch_ID`='".$last_branch['branch_id']."'  GROUP BY `viewemployee`.`Record Id`";
                     $new_user_id = $this->Employee->query($user_id);
                     
                     $count1 = count($new_user_id);

           foreach ($new_user_id as &$value) {
   
              array_push($arr_for_search, $value['viewemployee']['Record Id']);
                
           }
  
                $this->loadModel('Supervisor');
                $this->Supervisor->recursive = 3;
                $employees=$this->Supervisor->find('all',array(                      
                'conditions' =>array('Supervisor.sup_emp_id'=>$arr_for_search)));
                $this->set('employees', $employees);
                $this->set('results', $count1);       
        }

     } else{
       if(!empty($sup)){
                $conditions['Supervisor.sup_emp_id'] = $sup[0]['Employee']['id'];
                $this->loadModel('Supervisor');
                $this->Supervisor->recursive = 3;
                $employees=$this->Supervisor->find('all', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start));
                $this->set('employees', $employees);            
                $this->set('results', $this->Supervisor->find('count', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start)));       
        }

     }
                
  
    }

    function list_city($id = null) {
        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if ($location_id != -1) {
            $conditions['Employee.location_id'] = $location_id;
        }
        $this->Employee->recursive = 2;
        $this->set('employees', $this->Employee->find('all', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start, 'group' => 'city')));
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }

    function view($id = null) {
        if (!$id) {
            $this->Session->setFlash(__('Invalid employee', true));
            $this->redirect(array('action' => 'index'));
        }
        $this->Employee->recursive = 2;
        $this->set('employee', $this->Employee->read(null, $id));
    }
	
	 function view_directory($id = null) {
        if (!$id) {
            $this->Session->setFlash(__('Invalid employee', true));
            $this->redirect(array('action' => 'index'));
        }
        $this->Employee->recursive = 2;
        $this->set('employee', $this->Employee->read(null, $id));
    }

    
  
    function smtpmailer($to, $from, $from_name, $subject, $body, $is_gmail = true) {
        include(APPLIBS . DS . "PHPMailer" . DS . "class.phpmailer.php");
        $mail = new PHPMailer();  // create a new object
        $mail->IsSMTP(); // enable SMTP
        $mail->SMTPDebug = 1;  // debugging: 1 = errors and messages, 2 = messages only
        $mail->SMTPAuth = true;  // authentication enabled
        if ($is_gmail) {
            $mail->SMTPSecure = 'ssl'; // secure transfer enabled REQUIRED for GMail
            $mail->Host = 'smtp.gmail.com';
            $mail->Port = 465;
            $mail->Username = 'abay.erp@gmail.com';
            $mail->Password = 'X@43_mayl';
		} 
        
        $mail->SetFrom($from, $from_name);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->AddAddress($to);
        if (!$mail->Send()) {
            return 'Mail error: ' . $mail->ErrorInfo;
        } else {
            return true;
        }
    }
    function add($id = null) {
        /*  $to      = 'abenxr@gmail.com';
          $subject = 'the subject';
          $message = 'hello';
          $headers = 'From: webmaster@example.com' . "\r\n" .
          'Reply-To: webmaster@example.com' . "\r\n" .
          'X-Mailer: PHP/' . phpversion();

          mail($to, $subject, $message); */

        
        if (!empty($this->data)) {
        $this->data['Person']['first_name']=Sanitize::paranoid($this->data['Person']['first_name']);
        $this->data['Person']['middle_name']=Sanitize::paranoid($this->data['Person']['middle_name']);
        $this->data['Person']['last_name']=Sanitize::paranoid($this->data['Person']['last_name']);
        
            $this->Employee->create();
            $this->autoRender = false;
            if (isset($this->data['Employee']['photo'])) {
                $this->data['Employee']['photox'] = $this->data['Employee']['photo'];
                $photox = $this->data['Employee']['photo'];
                $this->data['Employee']['photo'] = $this->data['Employee']['photo']["name"];
            }
            $this->data = Sanitize::clean($this->data);
            $this->layout = 'message_layout';
            if ($this->Employee->save($this->data)) {
                App::import('Amharic');
                $this->data['Person']['first_name_am']=Amharic::encode_amharic($this->data['Person']['first_name_am']);
                $this->data['Person']['middle_name_am']=Amharic::encode_amharic($this->data['Person']['middle_name_am']);
                $this->data['Person']['last_name_am']=Amharic::encode_amharic($this->data['Person']['last_name_am']);
                
                $this->Employee->User->Person->create();
                $this->Employee->User->Person->save($this->data);
                $this->data['User']['person_id'] = $this->Employee->User->Person->getLastInsertId();
                $this->data['Person']['first_name']=ereg_replace(' ','',$this->data['Person']['first_name']);
                $this->data['Person']['first_name']=ereg_replace("\n",'',$this->data['Person']['first_name']);
                $this->data['Person']['first_name']=ereg_replace("\t",'',$this->data['Person']['first_name']);
                $this->data['User']['username'] = trim($this->data['Person']['first_name']) . $this->data['User']['person_id'];
                $pwd = rand(2000, 9000);
                $this->data['User']['password'] = $this->Auth->password('123456');
                $this->data['User']['is_active'] = 1;
                $this->Employee->User->create();
                $this->Employee->User->save($this->data);

                if (isset($photox)) {
                    $allowedExts = array("jpg", "jpeg", "gif", "png");
                    $extension = end(explode(".", $photox["name"]));
                    if ((($photox["type"] == "image/gif")
                            || ($photox["type"] == "image/jpeg")
                            || ($photox["type"] == "image/png")
                            || ($photox["type"] == "image/pjpeg"))
                            && in_array($extension, $allowedExts)) {
                        if ($photox["error"] > 0) {
                            
                        } else {
                            if (!is_dir(IMAGES . "employee_photos"))
                                mkdir(IMAGES . "employee_photos", 0777);

                            $photox["name"] = $this->Employee->getLastInsertId() . "." . $extension;
                            move_uploaded_file($photox["tmp_name"], IMAGES . "employee_photos" . DS . $photox["name"]);
                            $this->data['Employee']['photo'] = $photox["name"];
                            $file_name = $photox["name"];
                            $ext = substr($file_name, strripos($file_name, '.') + 1);

                            if (in_array($ext, array('png', 'jpg', 'jpeg', 'gif'))) {
                                list($w1, $h1) = getimagesize(IMAGES . 'employee_photos' . DS . $file_name);
                                if ($w1 > 150) {
                                    // Load
                                    $w2 = 150;
                                    $h2 = ($w2 * $h1) / $w1;
                                    if ($h2 > 190)
                                        $h2 = 190;

                                    $thumb = imagecreatetruecolor($w2, $h2);
                                    $source = null;
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        $source = imagecreatefromjpeg(IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        $source = imagecreatefrompng(IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        $source = imagecreatefromgif(IMAGES . 'employee_photos' . DS . $file_name);
                                    // Resize
                                    imagecopyresized($thumb, $source, 0, 0, 0, 0, $w2, $h2, $w1, $h1);
                                    //$new_image = 'acuity_' . date('YmdHi') . '.png';
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        imagejpeg($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        imagepng($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        imagegif($thumb, IMAGES . 'employee_photos' . DS . $file_name);

                                    //unlink(IMAGES . 'employee_photos' . DS . $file_name);
                                }
                            }
                        }
                    }
                }
                $this->data['EmployeeDetail']['employee_id'] = $this->Employee->getLastInsertId();
                $this->data['Employee']['user_id'] = $this->Employee->User->getLastInsertId();
                $this->Employee->save($this->data);
                $this->data['EmployeeDetail']['start_date'] = $this->data['Employee']['date_of_employment'];
                $this->data['EmployeeDetail']['end_date'] = '';
				$this->data['EmployeeDetail']['branch_id']=$this->data['User']['branch_id'];
                $con['Scale.grade_id'] = $this->data['EmployeeDetail']['grade_id'];
                $con['Scale.step_id'] = $this->data['EmployeeDetail']['step_id'];
                $this->loadModel('Scale');
                $salary = $this->Scale->find('all', array('conditions' => $con));
                //print_r($salary[0]['Scale']['salary']);
                $this->data['EmployeeDetail']['salary'] = $salary[0]['Scale']['salary'];
                
                $this->loadModel('EmployeeDetail');

                $position = $this->EmployeeDetail->Position->find('first', array('conditions' => array('Position.name' => $this->data['EmployeeDetail']['position_id'])));
                $this->data['EmployeeDetail']['position_id'] = $position['Position']['id'];

                $this->EmployeeDetail->create();
                $this->EmployeeDetail->save($this->data);
                //Give Employee ESS Permission
                $this->loadModel('Group');
                $this->Group->create();
                $this->data['Group']['User']['group_id']=25;
                $this->data['Group']['User']['user_id']=$this->data['Employee']['user_id'];
                $this->Group->User->save($this->data);
                //print_r($this->data);
  $tel=$this->data['Employee']['telephone'];
			$text="Hello ".$this->data['Person']['first_name'].", Your AbayERP account is   U:".$this->data['User']['username']." P:123456  Go to http://www.abaybank.com.et/web-portal to login. Thanks.";
            $this->data['TextMessage']['name']=$tel;
            $this->data['TextMessage']['text']=$text;
            $this->loadModel('TextMessage');
            $this->TextMessage->create();
            $this->TextMessage->save($this->data);
            
            if($this->data['User']['email']!==''){
            $this->data['Email']['name']="Your Abay Bank ERP System Account";
            $this->data['Email']['to']=$this->data['User']['email'];
            $this->data['Email']['from']='abayerp@abaybank.com.et';
            $this->data['Email']['from_name']='AbayERP';
			$fullname=$this->data['Person']['first_name'].' '.$this->data['Person']['middle_name'];
            //echo $body;
            $body='<table width="502" border="0">
  <tr>
    <td width="492" height="46" align="right" bgcolor="#0066FF" color="#fff"><div align="center" style="color:#fff"><span>Welcome to Abay Bank ERP System</span></div></td>
  </tr>
  <tr>
    <td  style="font-family: Arial,Helvetica,sans-serif;font-size: 14px;"><p>To:  '.$fullname.'</p>      <p class="style7">&nbsp;&nbsp;&nbsp;Your Abay Bank ERP System Account is:<br />
        <br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User Name: <strong>'.$this->data['User']['username'].'</strong><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password: <strong>123456</strong><br />
        <br />
&nbsp;
&nbsp;&nbsp;Use the address <strong>http://www.abaybank.com.et/web-portal</strong> to access your account and Please change your password after first login!<br />
        <br />
&nbsp;&nbsp;Regards,<br />
&nbsp;&nbsp;Abay Bank</p><hr></td>
  </tr>
  <tr>
    <td><span style="color:#999;font-size: 12px;">* Note: Please don\'t reply to this address, it is generated by the system.</span></td>
  </tr>
</table>';
            $this->data['Email']['body']=$body;
            $this->loadModel('Email');
            $this->Email->create();
            $this->Email->save($this->data);
			}
                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }
        if ($id)
            $this->set('parent_id', $id);
        //$locations = $this->Employee->Location->find('list');
        $locations = $this->Employee->EmpLoc->generatetreelist(null, null, null, '---');
        $branches = $this->Employee->User->Branch->find('list');
        $users = $this->Employee->User->find('list');
        $this->loadModel('EmployeeDetail');
        $grades = $this->EmployeeDetail->Grade->find('list');
        $steps = $this->EmployeeDetail->Step->find('list');
        $positions = $this->EmployeeDetail->Position->find('list');
        $this->set(compact('locations', 'users', 'branches', 'grades', 'steps', 'positions'));
    }
function editphoto($id = null ){
	 if (!empty($this->data)) {
	 $this->autoRender = false;
	  $this->layout = 'message_layout';
	if ($this->data['Employee']['photo']['name']!=='') {
                $this->data['Employee']['photox'] = $this->data['Employee']['photo'];
                $photox = $this->data['Employee']['photo'];
                $this->data['Employee']['photo'] = $this->data['Employee']['photo']["name"];
            }else{
                unset($this->data['Employee']['photo']);
            }
	 if (isset($photox)) {
                    $allowedExts = array("jpg", "jpeg", "gif", "png");
                    $extension = end(explode(".", $photox["name"]));
                    if ((($photox["type"] == "image/gif")
                            || ($photox["type"] == "image/jpeg")
                            || ($photox["type"] == "image/png")
                            || ($photox["type"] == "image/pjpeg"))
                            && in_array($extension, $allowedExts)) {
                        if ($photox["error"] > 0) {
                            
                        } else {
                            if (!is_dir(IMAGES . "employee_photos"))
                                mkdir(IMAGES . "employee_photos", 0777);
                            $photox['name'] = $this->data['Employee']['id'] . "." . $extension;
                            move_uploaded_file($photox['tmp_name'], IMAGES . "employee_photos" . DS . $photox['name']);
                            $this->data['Employee']['photo'] = $photox['name'];
                            $file_name = $photox['name'];
                            $ext = substr($file_name, strripos($file_name, '.') + 1);

                            if (in_array($ext, array('png', 'jpg', 'jpeg', 'gif'))) {
                                list($w1, $h1) = getimagesize(IMAGES . "employee_photos" . DS . $file_name);
                                if ($w1 > 150) {
                                    // Load
                                    $w2 = 150;
                                    $h2 = ($w2 * $h1) / $w1;
                                    if ($h2 > 165)
                                        $h2 = 165;

                                    $thumb = imagecreatetruecolor($w2, $h2);
                                    $source = null;
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        $source = imagecreatefromjpeg(IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        $source = imagecreatefrompng(IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        $source = imagecreatefromgif(IMAGES . 'employee_photos' . DS . $file_name);
                                    // Resize
                                    imagecopyresized($thumb, $source, 0, 0, 0, 0, $w2, $h2, $w1, $h1);
                                    //$new_image = 'acuity_' . date('YmdHi') . '.png';
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        imagejpeg($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        imagepng($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        imagegif($thumb, IMAGES . 'employee_photos' . DS . $file_name);

                                    //unlink(IMAGES . 'employee_photos' . DS . $file_name);
                                }
                            }
                        }
                    }
                }
		if($this->Employee->save($this->data)){
		   $this->Session->setFlash(__('Profile photo updated.', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('Error. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
		}
		  $this->Employee->recursive = 2;
        $this->set('employee', $this->Employee->read(null, $id));

     
	}
    function edit($id = null, $parent_id = null) {
        if (!$id && empty($this->data)) {
            $this->Session->setFlash(__('Invalid employee', true), '');
            $this->redirect(array('action' => 'index'));
        }
      /*  if (!empty($this->data)) {
            $this->autoRender = false;
            if ($this->Employee->save($this->data)) {
                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }*/
         

        if (!empty($this->data)) {
        $this->data['Person']['first_name']=Sanitize::paranoid($this->data['Person']['first_name']);
        $this->data['Person']['middle_name']=Sanitize::paranoid($this->data['Person']['middle_name']);
        $this->data['Person']['last_name']=Sanitize::paranoid($this->data['Person']['last_name']);
        
            $this->autoRender = false;
          
            if ($this->data['Employee']['photo']['name']!=='') {
                $this->data['Employee']['photox'] = $this->data['Employee']['photo'];
                $photox = $this->data['Employee']['photo'];
                $this->data['Employee']['photo'] = $this->data['Employee']['photo']["name"];
            }else{
                unset($this->data['Employee']['photo']);
            }
            $this->data = Sanitize::clean($this->data);
             $this->layout = 'message_layout';
            if ($this->Employee->save($this->data)) {
                App::import('Amharic');
                $this->data['Person']['first_name_am']=Amharic::encode_amharic($this->data['Person']['first_name_am']);
                $this->data['Person']['middle_name_am']=Amharic::encode_amharic($this->data['Person']['middle_name_am']);
                $this->data['Person']['last_name_am']=Amharic::encode_amharic($this->data['Person']['last_name_am']);
                // $this->Employee->User->Person->create();
                $this->Employee->User->Person->save($this->data);
                /// $this->data['User']['person_id'] = $this->Employee->User->Person->getLastInsertId();
                //  $this->data['User']['username'] = $this->data['Person']['first_name'] . $this->data['User']['person_id'];
                // $pwd = rand(2000, 9000);
                //  $this->data['User']['password'] = $this->Auth->password($pwd);
                  $this->data['User']['is_active'] = 1;
                // $this->Employee->User->create();
                $this->Employee->User->save($this->data);

                if (isset($photox)) {
                    $allowedExts = array("jpg", "jpeg", "gif", "png");
                    $extension = end(explode(".", $photox["name"]));
                    if ((($photox["type"] == "image/gif")
                            || ($photox["type"] == "image/jpeg")
                            || ($photox["type"] == "image/png")
                            || ($photox["type"] == "image/pjpeg"))
                            && in_array($extension, $allowedExts)) {
                        if ($photox["error"] > 0) {
                            
                        } else {
                            if (!is_dir(IMAGES . "employee_photos"))
                                mkdir(IMAGES . "employee_photos", 0777);
                            $photox['name'] = $this->data['Employee']['id'] . "." . $extension;
                            move_uploaded_file($photox['tmp_name'], IMAGES . "employee_photos" . DS . $photox['name']);
                            $this->data['Employee']['photo'] = $photox['name'];
                            $file_name = $photox['name'];
                            $ext = substr($file_name, strripos($file_name, '.') + 1);

                            if (in_array($ext, array('png', 'jpg', 'jpeg', 'gif'))) {
                                list($w1, $h1) = getimagesize(IMAGES . "employee_photos" . DS . $file_name);
                                if ($w1 > 150) {
                                    // Load
                                    $w2 = 150;
                                    $h2 = ($w2 * $h1) / $w1;
                                    if ($h2 > 190)
                                        $h2 = 190;

                                    $thumb = imagecreatetruecolor($w2, $h2);
                                    $source = null;
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        $source = imagecreatefromjpeg(IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        $source = imagecreatefrompng(IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        $source = imagecreatefromgif(IMAGES . 'employee_photos' . DS . $file_name);
                                    // Resize
                                    imagecopyresized($thumb, $source, 0, 0, 0, 0, $w2, $h2, $w1, $h1);
                                    //$new_image = 'acuity_' . date('YmdHi') . '.png';
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        imagejpeg($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        imagepng($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        imagegif($thumb, IMAGES . 'employee_photos' . DS . $file_name);

                                    //unlink(IMAGES . 'employee_photos' . DS . $file_name);
                                }
                            }
                        }
                    }
                }
                //$this->data['EmployeeDetail']['employee_id'] = $this->Employee->getLastInsertId();
                // $this->data['Employee']['user_id'] = $this->Employee->User->getLastInsertId();
                $this->Employee->save($this->data);
                $this->data['EmployeeDetail']['start_date'] = $this->data['Employee']['date_of_employment'];
				$this->data['EmployeeDetail']['branch_id']=$this->data['User']['branch_id'];
                $con['Scale.grade_id'] = $this->data['EmployeeDetail']['grade_id'];
                $con['Scale.step_id'] = $this->data['EmployeeDetail']['step_id'];
                $this->loadModel('Scale');
                $salary = $this->Scale->find('all', array('conditions' => $con));
                //print_r($salary[0]['Scale']['salary']);
                $this->data['EmployeeDetail']['salary'] = $salary[0]['Scale']['salary'];

                $this->loadModel('EmployeeDetail');

                $position = $this->EmployeeDetail->Position->find('first', array('conditions' => array('Position.name' => $this->data['EmployeeDetail']['position_id'])));
                $this->data['EmployeeDetail']['position_id'] = $position['Position']['id'];

                //$this->EmployeeDetail->create();
                $this->EmployeeDetail->save($this->data);
                //print_r($this->data);

                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }
        $this->Employee->recursive = 2;
        $this->set('employee', $this->Employee->read(null, $id));

        if ($parent_id) {
            $this->set('parent_id', $parent_id);
        }

        $locations = $this->Employee->EmpLoc->generatetreelist(null, null, null, '---');
        $branches = $this->Employee->User->Branch->find('list');
       // $users = $this->Employee->User->find('list');
        $this->loadModel('EmployeeDetail');
        $grades = $this->EmployeeDetail->Grade->find('list');
        $steps = $this->EmployeeDetail->Step->find('list');
        $positions = $this->EmployeeDetail->Position->find('list');
        $this->set(compact('locations',  'branches', 'grades', 'steps', 'positions'));
    }
	function deleteh($id = null){
		$this->autoRender=false;
		if(!$id){
			$this->Session->setFlash(__('Invalid id for employee',true),'');
			$this->render('/elements/failure');
			}
			$this->data['Employee']['id']=$id;
			$this->data['Employee']['status']='deleted';
			$this->Employee->save($this->data);
	}
    function delete($id = null) {
        $this->autoRender = false;
        if (!$id) {
            $this->Session->setFlash(__('Invalid id for employee', true), '');
            $this->render('/elements/failure');
        }
        if (stripos($id, '_') !== false) {
            $ids = explode('_', $id);
            try {
                foreach ($ids as $i) {
                    $this->Employee->delete($i);
                }
                $this->Session->setFlash(__('Employee deleted', true), '');
                $this->render('/elements/success');
            } catch (Exception $e) {
                $this->Session->setFlash(__('Employee was not deleted', true), '');
                $this->render('/elements/failure');
            }
        } else {
            if ($this->Employee->delete($id)) {
                $this->Session->setFlash(__('Employee deleted', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('Employee was not deleted', true), '');
                $this->render('/elements/failure');
            }
        }
    }
	
	 function search_branch(){
      $branchs=$this->Employee->query('SELECT * FROM `branches`');
      $this->set('branchs',$branchs);
    }
     function search_position(){
      $position=$this->Employee->query('SELECT * FROM `positions`');
      $this->set('positions',$position);
    }


    function emp_search(){
    }
	function getreport(){
		$ids = array('AB0340', 'AB0795', 'AB0174', 'AB0316', 'AB0580', 'AB0734', 'AB2167', 'AB0810', 'AB0034', 'AB0042', 'AB0079', 'AB0103', 'AB0151', 'AB0325', 'AB0396', 'AB0399', 'AB0602', 'AB0649', 'AB0727', 'AB0775', 'AB0797', 'AB0812', 'AB0813', 'AB0846', 'AB0858', 'AB0876', 'AB0941', 'AB2159', 'AB2164', 'AB0004', 'AB1301', 'AB1057', 'AB0013', 'AB0008', 'AB1757', 'AB0049', 'AB0009', 'AB0016', 'AB0015', 'AB0355', 'AB0005', 'AB0012', 'AB1291', 'AB0035', 'AB0331', 'AB0923', 'AB0977', 'AB0545', 'AB1207', 'AB0023', 'AB2403', 'AB2406', 'AB0536', 'AB0461', 'AB0650', 'AB1381', 'AB0489', 'AB0765', 'AB2408', 'AB0112', 'AB1989', 'AB0038', 'AB0918', 'AB1677', 'AB2503', 'AB0850', 'AB2157', 'AB0269', 'AB1578', 'AB0224', 'AB0220', 'AB0770', 'AB0859', 'AB0257', 'AB0006', 'AB0024', 'AB0383', 'AB0211', 'AB2410', 'AB0011', 'AB0933', 'AB2401', 'AB0796', 'AB0001', 'AB0432', 'AB0018', 'AB0168', 'AB0002', 'AB0003', 'AB0440');
		foreach($ids as $id){
			$this->Employee->recursive = -1;
			$record=$this->Employee->find('all', array('conditions' =>array('card'=>$id)));
			$url='http://10.1.85.10:8080/iportal/iv?__locale=en_US&__svg=true&__design=C%3A%2FUsers%2FAdministrator%2FWorkspace%2FAbay%20Report%2FReport%20Designs%2FInfo_single.rptdesign&connectionHandle=49067&__timezone=EAT&__masterpage=true&__vp=workgroup&closex=true&__report=%2F%24%24%24Transient%2Facfile42172.rptdocument&viewerId=container&__format=XLS&__page=1-1&__ivsessionid=1595657654981_mn0rdud5zwx074pb4qbs5rs6&__persistentdocumentname=/$$$Transient/acfile42172.rptdocument&employee='.$record[0]['Employee']['id'];
			$url='http://10.1.85.10:8080/iportal/frameset?__report=C%3A%5CUsers%5CAdministrator%5CWorkspace%5CAbay+Report%5CReport+Designs%5CInfo_single.rptdesign&__format=XLS&__svg=true&__locale=en_US&__timezone=EAT&__masterpage=true&__rtl=false&__cubememsize=500&__resourceFolder=C%3A%5CUsers%5CAdministrator%5CWorkspace%5CAbay+Report%5CReport+Designs&309153348t&employee='.$record[0]['Employee']['id'];
			echo '<a href="'.$url.'" download="filename.xls">'.$id.' '.$record[0]['Employee']['card'].'</a></br>';
			
		}
	
	}
	function profileremover($id=null){
	 $this->autoRender = false;
		if($id){
			$this->data['Employee']['photo']='';
			$this->data['Employee']['id']=$id;
			$this->Employee->save($this->data);
			echo "photo removed";
		}
	}
}

?>