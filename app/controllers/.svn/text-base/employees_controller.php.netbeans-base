<?php
App::import('Sanitize');
class EmployeesController extends AppController {

    var $name = 'Employees';

    function index() {
        $locations = $this->Employee->Location->find('all');
        $this->set(compact('locations'));
    }

    function index2($id = null) {
        $this->set('parent_id', $id);
    }

    function search() {
        
    }

    function search_emp() {
        //$this->loadModel('Person');
        $this->Employee->recursive=2;
        //$people = $this->Person->find('list');
        $this->set('people', $this->Employee->find('all'));
        //$this->set('results', $this->Person->find('count'));
    }

    function list_data($id = null) {

        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if (isset($conditions['Employee.name LIKE'])) {
            if (trim($conditions['Employee.name LIKE']) == '%%')
                unset($conditions['Employee.name LIKE']);
        }
        if (isset($conditions['Employee.name LIKE'])) {
            $fullname = str_replace('%', '', $conditions['Employee.name LIKE']);
            unset($conditions['Employee.name LIKE']);
            $xx = explode(' ', trim($fullname));
            $con['Person.first_name LIKE'] = (isset($xx[0])) ? $xx[0] . '%' : '%%';
            $con['Person.middle_name LIKE'] = (isset($xx[1])) ? $xx[1] . '%' : '%%';
            $con['Person.last_name LIKE'] = (isset($xx[2])) ? $xx[2] . '%' : '%%';
            if (count($xx) < 4) {
                //$this->Employee->User->Person->recursive=4;
                $peos = $this->Employee->User->Person->find('all', array('conditions' => $con));
                //print_r($peos);
                $condu = array();
                foreach ($peos as $peo) {
                    if (isset($peo['User'][0]))
                        $condu = array_merge(array($peo['User'][0]['id']), $condu);
                }
            }else
                $condu = array('-1');
            $conditions = array_merge(array("OR" => array("Employee.user_id" => $condu)), $conditions);
        }
        if ($location_id != -1) {
            $conditions['Employee.location_id'] = $location_id;
        }
        $this->Employee->recursive = 2;
        $this->set('employees', $this->Employee->find('all', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start)));
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }

    function list_city($id = null) {
        $start = (isset($_REQUEST['start'])) ? $_REQUEST['start'] : 0;
        $limit = (isset($_REQUEST['limit'])) ? $_REQUEST['limit'] : 5;
        $location_id = (isset($_REQUEST['location_id'])) ? $_REQUEST['location_id'] : -1;
        if ($id)
            $location_id = ($id) ? $id : -1;
        $conditions = (isset($_REQUEST['conditions'])) ? $_REQUEST['conditions'] : '';

        eval("\$conditions = array( " . $conditions . " );");
        if ($location_id != -1) {
            $conditions['Employee.location_id'] = $location_id;
        }
        $this->Employee->recursive = 2;
        $this->set('employees', $this->Employee->find('all', array('conditions' => $conditions, 'limit' => $limit, 'offset' => $start, 'group' => 'city')));
        $this->set('results', $this->Employee->find('count', array('conditions' => $conditions)));
    }

    function view($id = null) {
        if (!$id) {
            $this->Session->setFlash(__('Invalid employee', true));
            $this->redirect(array('action' => 'index'));
        }
        $this->Employee->recursive = 3;
        $this->set('employee', $this->Employee->read(null, $id));
    }

    function add($id = null) {
        /*  $to      = 'abenxr@gmail.com';
          $subject = 'the subject';
          $message = 'hello';
          $headers = 'From: webmaster@example.com' . "\r\n" .
          'Reply-To: webmaster@example.com' . "\r\n" .
          'X-Mailer: PHP/' . phpversion();

          mail($to, $subject, $message); */

        
        if (!empty($this->data)) {
        $this->data['Person']['first_name']=Sanitize::paranoid($this->data['Person']['first_name']);
        $this->data['Person']['middle_name']=Sanitize::paranoid($this->data['Person']['middle_name']);
        $this->data['Person']['last_name']=Sanitize::paranoid($this->data['Person']['last_name']);
        $this->data = Sanitize::clean($this->data);
            $this->Employee->create();
            $this->autoRender = false;
            if (isset($this->data['Employee']['photo'])) {
                $this->data['Employee']['photox'] = $this->data['Employee']['photo'];
                $this->data['Employee']['photo'] = $this->data['Employee']['photo']["name"];
            }
            $this->layout = 'message_layout';
            if ($this->Employee->save($this->data)) {
                App::import('Amharic');
                $this->data['Person']['first_name_am']=Amharic::encode_amharic($this->data['Person']['first_name_am']);
                $this->data['Person']['middle_name_am']=Amharic::encode_amharic($this->data['Person']['middle_name_am']);
                $this->data['Person']['last_name_am']=Amharic::encode_amharic($this->data['Person']['last_name_am']);
                
                $this->Employee->User->Person->create();
                $this->Employee->User->Person->save($this->data);
                $this->data['User']['person_id'] = $this->Employee->User->Person->getLastInsertId();

                $this->data['User']['username'] = $this->data['Person']['first_name'] . $this->data['User']['person_id'];
                $pwd = rand(2000, 9000);
                $this->data['User']['password'] = $this->Auth->password($pwd);
                $this->data['User']['is_active'] = 1;
                $this->Employee->User->create();
                $this->Employee->User->save($this->data);

                if (isset($this->data['Employee']['photox'])) {
                    $allowedExts = array("jpg", "jpeg", "gif", "png");
                    $extension = end(explode(".", $this->data['Employee']['photox']["name"]));
                    if ((($this->data['Employee']['photox']["type"] == "image/gif")
                            || ($this->data['Employee']['photox']["type"] == "image/jpeg")
                            || ($this->data['Employee']['photox']["type"] == "image/png")
                            || ($this->data['Employee']['photox']["type"] == "image/pjpeg"))
                            && in_array($extension, $allowedExts)) {
                        if ($this->data['Employee']['photox']["error"] > 0) {
                            
                        } else {
                            if (!is_dir(IMAGES . "employee_photos"))
                                mkdir(IMAGES . "employee_photos", 0777);

                            $this->data['Employee']['photox']["name"] = $this->Employee->getLastInsertId() . "." . $extension;
                            move_uploaded_file($this->data['Employee']['photox']["tmp_name"], IMAGES . "employee_photos" . DS . $this->data['Employee']['photox']["name"]);
                            $this->data['Employee']['photo'] = $this->data['Employee']['photox']["name"];
                            $file_name = $this->data['Employee']['photox']["name"];
                            $ext = substr($file_name, strripos($file_name, '.') + 1);

                            if (in_array($ext, array('png', 'jpg', 'jpeg', 'gif'))) {
                                list($w1, $h1) = getimagesize(IMAGES . 'employee_photos' . DS . $file_name);
                                if ($w1 > 150) {
                                    // Load
                                    $w2 = 150;
                                    $h2 = ($w2 * $h1) / $w1;
                                    if ($h2 > 190)
                                        $h2 = 190;

                                    $thumb = imagecreatetruecolor($w2, $h2);
                                    $source = null;
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        $source = imagecreatefromjpeg(IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        $source = imagecreatefrompng(IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        $source = imagecreatefromgif(IMAGES . 'employee_photos' . DS . $file_name);
                                    // Resize
                                    imagecopyresized($thumb, $source, 0, 0, 0, 0, $w2, $h2, $w1, $h1);
                                    //$new_image = 'acuity_' . date('YmdHi') . '.png';
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        imagejpeg($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        imagepng($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        imagegif($thumb, IMAGES . 'employee_photos' . DS . $file_name);

                                    //unlink(IMAGES . 'employee_photos' . DS . $file_name);
                                }
                            }
                        }
                    }
                }
                $this->data['EmployeeDetail']['employee_id'] = $this->Employee->getLastInsertId();
                $this->data['Employee']['user_id'] = $this->Employee->User->getLastInsertId();
                $this->Employee->save($this->data);
                $this->data['EmployeeDetail']['start_date'] = $this->data['Employee']['date_of_employment'];
                $this->data['EmployeeDetail']['end_date'] = '';
                $con['Scale.grade_id'] = $this->data['EmployeeDetail']['grade_id'];
                $con['Scale.step_id'] = $this->data['EmployeeDetail']['step_id'];
                $this->loadModel('Scale');
                $salary = $this->Scale->find('all', array('conditions' => $con));
                //print_r($salary[0]['Scale']['salary']);
                $this->data['EmployeeDetail']['salary'] = $salary[0]['Scale']['salary'];
                
                $this->loadModel('EmployeeDetail');

                $position = $this->EmployeeDetail->Position->find('first', array('conditions' => array('Position.name' => $this->data['EmployeeDetail']['position_id'])));
                $this->data['EmployeeDetail']['position_id'] = $position['Position']['id'];

                $this->EmployeeDetail->create();
                $this->EmployeeDetail->save($this->data);
                //Give Employee ESS Permission
                $this->loadModel('Group');
                $this->Group->create();
                $this->data['Group']['User']['group_id']=25;
                $this->data['Group']['User']['user_id']=$this->data['Employee']['user_id'];
                $this->Group->User->save($this->data);
                //print_r($this->data);

                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }
        if ($id)
            $this->set('parent_id', $id);
        //$locations = $this->Employee->Location->find('list');
        $locations = $this->Employee->Location->generatetreelist(null, null, null, '---');
        $branches = $this->Employee->User->Branch->find('list');
        $users = $this->Employee->User->find('list');
        $this->loadModel('EmployeeDetail');
        $grades = $this->EmployeeDetail->Grade->find('list');
        $steps = $this->EmployeeDetail->Step->find('list');
        $positions = $this->EmployeeDetail->Position->find('list');
        $this->set(compact('locations', 'users', 'branches', 'grades', 'steps', 'positions'));
    }

    function edit($id = null, $parent_id = null) {
        if (!$id && empty($this->data)) {
            $this->Session->setFlash(__('Invalid employee', true), '');
            $this->redirect(array('action' => 'index'));
        }
      /*  if (!empty($this->data)) {
            $this->autoRender = false;
            if ($this->Employee->save($this->data)) {
                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }*/

        if (!empty($this->data)) {
            // $this->Employee->create();
          //  print_r($this->data);
          //  exit();
        $this->data['Person']['first_name']=Sanitize::paranoid($this->data['Person']['first_name']);
        $this->data['Person']['middle_name']=Sanitize::paranoid($this->data['Person']['middle_name']);
        $this->data['Person']['last_name']=Sanitize::paranoid($this->data['Person']['last_name']);
        $this->data = Sanitize::clean($this->data);
            $this->autoRender = false;
            if ($this->data['Employee']['photo']['name']!=='') {
                $this->data['Employee']['photox'] = $this->data['Employee']['photo'];
                $this->data['Employee']['photo'] = $this->data['Employee']['photo']["name"];
            }else{
                unset($this->data['Employee']['photo']);
            }
             $this->layout = 'message_layout';
            if ($this->Employee->save($this->data)) {
                App::import('Amharic');
                $this->data['Person']['first_name_am']=Amharic::encode_amharic($this->data['Person']['first_name_am']);
                $this->data['Person']['middle_name_am']=Amharic::encode_amharic($this->data['Person']['middle_name_am']);
                $this->data['Person']['last_name_am']=Amharic::encode_amharic($this->data['Person']['last_name_am']);
                // $this->Employee->User->Person->create();
                $this->Employee->User->Person->save($this->data);
                /// $this->data['User']['person_id'] = $this->Employee->User->Person->getLastInsertId();
                //  $this->data['User']['username'] = $this->data['Person']['first_name'] . $this->data['User']['person_id'];
                // $pwd = rand(2000, 9000);
                //  $this->data['User']['password'] = $this->Auth->password($pwd);
                ///  $this->data['User']['is_active'] = 1;
                // $this->Employee->User->create();
                $this->Employee->User->save($this->data);

                if (isset($this->data['Employee']['photox'])) {
                    $allowedExts = array("jpg", "jpeg", "gif", "png");
                    $extension = end(explode(".", $this->data['Employee']['photox']["name"]));
                    if ((($this->data['Employee']['photox']["type"] == "image/gif")
                            || ($this->data['Employee']['photox']["type"] == "image/jpeg")
                            || ($this->data['Employee']['photox']["type"] == "image/png")
                            || ($this->data['Employee']['photox']["type"] == "image/pjpeg"))
                            && in_array($extension, $allowedExts)) {
                        if ($this->data['Employee']['photox']["error"] > 0) {
                            
                        } else {
                            if (!is_dir(IMAGES . "employee_photos"))
                                mkdir(IMAGES . "employee_photos", 0777);

                            $this->data['Employee']['photox']["name"] = $this->data['Employee']['id'] . "." . $extension;
                            move_uploaded_file($this->data['Employee']['photox']["tmp_name"], IMAGES . "employee_photos" . DS . $this->data['Employee']['photox']["name"]);
                            $this->data['Employee']['photo'] = $this->data['Employee']['photox']["name"];
                            $file_name = $this->data['Employee']['photox']["name"];
                            $ext = substr($file_name, strripos($file_name, '.') + 1);

                            if (in_array($ext, array('png', 'jpg', 'jpeg', 'gif'))) {
                                list($w1, $h1) = getimagesize(IMAGES . 'employee_photos' . DS . $file_name);
                                if ($w1 > 150) {
                                    // Load
                                    $w2 = 150;
                                    $h2 = ($w2 * $h1) / $w1;
                                    if ($h2 > 190)
                                        $h2 = 190;

                                    $thumb = imagecreatetruecolor($w2, $h2);
                                    $source = null;
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        $source = imagecreatefromjpeg(IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        $source = imagecreatefrompng(IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        $source = imagecreatefromgif(IMAGES . 'employee_photos' . DS . $file_name);
                                    // Resize
                                    imagecopyresized($thumb, $source, 0, 0, 0, 0, $w2, $h2, $w1, $h1);
                                    //$new_image = 'acuity_' . date('YmdHi') . '.png';
                                    if (in_array($ext, array('jpg', 'jpeg')))
                                        imagejpeg($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    elseif (in_array($ext, array('png')))
                                        imagepng($thumb, IMAGES . 'employee_photos' . DS . $file_name);
                                    else
                                        imagegif($thumb, IMAGES . 'employee_photos' . DS . $file_name);

                                    //unlink(IMAGES . 'employee_photos' . DS . $file_name);
                                }
                            }
                        }
                    }
                }
                //$this->data['EmployeeDetail']['employee_id'] = $this->Employee->getLastInsertId();
                // $this->data['Employee']['user_id'] = $this->Employee->User->getLastInsertId();
                $this->Employee->save($this->data);
                $this->data['EmployeeDetail']['start_date'] = $this->data['Employee']['date_of_employment'];
                $con['Scale.grade_id'] = $this->data['EmployeeDetail']['grade_id'];
                $con['Scale.step_id'] = $this->data['EmployeeDetail']['step_id'];
                $this->loadModel('Scale');
                $salary = $this->Scale->find('all', array('conditions' => $con));
                //print_r($salary[0]['Scale']['salary']);
                $this->data['EmployeeDetail']['salary'] = $salary[0]['Scale']['salary'];

                $this->loadModel('EmployeeDetail');

                $position = $this->EmployeeDetail->Position->find('first', array('conditions' => array('Position.name' => $this->data['EmployeeDetail']['position_id'])));
                $this->data['EmployeeDetail']['position_id'] = $position['Position']['id'];

                //$this->EmployeeDetail->create();
                $this->EmployeeDetail->save($this->data);
                //print_r($this->data);

                $this->Session->setFlash(__('The employee has been saved', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('The employee could not be saved. Please, try again.', true), '');
                $this->render('/elements/failure');
            }
        }
        $this->Employee->recursive = 2;
        $this->set('employee', $this->Employee->read(null, $id));

        if ($parent_id) {
            $this->set('parent_id', $parent_id);
        }

        $locations = $this->Employee->Location->generatetreelist(null, null, null, '---');
        $branches = $this->Employee->User->Branch->find('list');
       // $users = $this->Employee->User->find('list');
        $this->loadModel('EmployeeDetail');
        $grades = $this->EmployeeDetail->Grade->find('list');
        $steps = $this->EmployeeDetail->Step->find('list');
        $positions = $this->EmployeeDetail->Position->find('list');
        $this->set(compact('locations',  'branches', 'grades', 'steps', 'positions'));
    }

    function delete($id = null) {
        $this->autoRender = false;
        if (!$id) {
            $this->Session->setFlash(__('Invalid id for employee', true), '');
            $this->render('/elements/failure');
        }
        if (stripos($id, '_') !== false) {
            $ids = explode('_', $id);
            try {
                foreach ($ids as $i) {
                    $this->Employee->delete($i);
                }
                $this->Session->setFlash(__('Employee deleted', true), '');
                $this->render('/elements/success');
            } catch (Exception $e) {
                $this->Session->setFlash(__('Employee was not deleted', true), '');
                $this->render('/elements/failure');
            }
        } else {
            if ($this->Employee->delete($id)) {
                $this->Session->setFlash(__('Employee deleted', true), '');
                $this->render('/elements/success');
            } else {
                $this->Session->setFlash(__('Employee was not deleted', true), '');
                $this->render('/elements/failure');
            }
        }
    }

}

?>